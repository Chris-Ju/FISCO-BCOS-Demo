// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package store

import (
	"math/big"
	"strings"

	"github.com/FISCO-BCOS/go-sdk/accounts/abi"
	"github.com/FISCO-BCOS/go-sdk/accounts/abi/bind"
	"github.com/FISCO-BCOS/go-sdk/common"
	"github.com/FISCO-BCOS/go-sdk/core/types"
	"github.com/FISCO-BCOS/go-sdk/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = common.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StoreABI is the input ABI used to generate the binding from.
const StoreABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selectCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"A\",\"type\":\"string\"},{\"name\":\"B\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"insertAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"A\",\"type\":\"string\"},{\"name\":\"B\",\"type\":\"string\"},{\"name\":\"money\",\"type\":\"int256\"}],\"name\":\"updateAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selectAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"int256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"trustworthy\",\"type\":\"int256\"},{\"name\":\"funds\",\"type\":\"int256\"}],\"name\":\"updateCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"trustworthy\",\"type\":\"int256\"},{\"name\":\"funds\",\"type\":\"int256\"}],\"name\":\"insertCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeCompany\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"

// StoreBin is the compiled bytecode used for deploying new contracts.
var StoreBin = "0x608060405234801561001057600080fd5b50614f0e806100206000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806346038ddc146100a957806365538db2146100e657806371ad90b214610114578063830aed51146101515780639dca362f1461018e578063e3d1317a146101b9578063e4464a6c146101e4578063ef40a46714610212578063fab6fabd1461024f578063ffcee0a11461028c575b600080fd5b3480156100b557600080fd5b506100d060048036036100cb9190810190612225565b6102c9565b6040516100dd91906127f8565b60405180910390f35b3480156100f257600080fd5b506100fb6103a2565b60405161010b9493929190612736565b60405180910390f35b34801561012057600080fd5b5061013b6004803603610136919081019061233a565b610d6c565b60405161014891906127f8565b60405180910390f35b34801561015d57600080fd5b506101786004803603610173919081019061233a565b610e4e565b60405161018591906127f8565b60405180910390f35b34801561019a57600080fd5b506101a3610f30565b6040516101b091906127f8565b60405180910390f35b3480156101c557600080fd5b506101ce611020565b6040516101db91906127f8565b60405180910390f35b3480156101f057600080fd5b506101f9611110565b6040516102099493929190612797565b60405180910390f35b34801561021e57600080fd5b50610239600480360361023491908101906122a7565b6111ef565b60405161024691906127f8565b60405180910390f35b34801561025b57600080fd5b50610276600480360361027191908101906122a7565b6116ee565b60405161028391906127f8565b60405180910390f35b34801561029857600080fd5b506102b360048036036102ae9190810190612225565b611b4b565b6040516102c091906127f8565b60405180910390f35b6000806102d4611e10565b604051809103906000f0801580156102f0573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff166380599e4b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103489190612813565b602060405180830381600087803b15801561036257600080fd5b505af1158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061039a91908101906121fc565b915050919050565b60608060608060008060008060608060608060008061100199508973ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161040f90612a6d565b602060405180830381600087803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061046191908101906121d3565b98508873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156104c757600080fd5b505af11580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104ff9190810190612158565b97508873ffffffffffffffffffffffffffffffffffffffff1663e8434e39896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610556919061288f565b602060405180830381600087803b15801561057057600080fd5b505af1158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105a89190810190612181565b96508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061064691908101906121fc565b60405190808252806020026020018201604052801561067957816020015b60608152602001906001900390816106645790505b5095508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061071891908101906121fc565b60405190808252806020026020018201604052801561074b57816020015b60608152602001906001900390816107365790505b5094508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107ea91908101906121fc565b6040519080825280602002602001820160405280156108185781602001602082028038833980820191505090505b5093508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561087f57600080fd5b505af1158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108b791908101906121fc565b6040519080825280602002602001820160405280156108e55781602001602082028038833980820191505090505b509250600091505b8673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061098991908101906121fc565b821215610d50578673ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109e591906127f8565b602060405180830381600087803b1580156109ff57600080fd5b505af1158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a3791908101906121aa565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a8c9061297c565b600060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610ae39190810190612266565b8683815181101515610af157fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b5190612927565b600060405180830381600087803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610ba89190810190612266565b8583815181101515610bb657fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c1690612a1f565b602060405180830381600087803b158015610c3057600080fd5b505af1158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c6891908101906121fc565b8483815181101515610c7657fe5b90602001906020020181815250508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cd7906129d1565b602060405180830381600087803b158015610cf157600080fd5b505af1158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2991908101906121fc565b8383815181101515610d3757fe5b90602001906020020181815250508160010191506108ed565b858585859d509d509d509d505050505050505050505090919293565b600080610d77611e10565b604051809103906000f080158015610d93573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663c795e529878787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610df19493929190612835565b602060405180830381600087803b158015610e0b57600080fd5b505af1158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e4391908101906121fc565b915050949350505050565b600080610e59611e10565b604051809103906000f080158015610e75573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff166331252c95878787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ed39493929190612835565b602060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f2591908101906121fc565b915050949350505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f8d90612ad3565b602060405180830381600087803b158015610fa757600080fd5b505af1158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fdf91908101906121fc565b90507fb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf2108160405161101091906127f8565b60405180910390a1809250505090565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166356004b6a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161107d90612a8d565b602060405180830381600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110cf91908101906121fc565b90507fb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf2108160405161110091906127f8565b60405180910390a1809250505090565b6060806060806000611120611e10565b604051809103906000f08015801561113c573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16635398a96b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111e09190810190612095565b94509450945094505090919293565b60008060008060008061100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161125090612a6d565b602060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112a291908101906121d3565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561130857600080fd5b505af115801561131c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061134091908101906121aa565b92508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113979190612947565b600060405180830381600087803b1580156113b157600080fd5b505af11580156113c5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161141e91906129f1565b600060405180830381600087803b15801561143857600080fd5b505af115801561144c573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114a59190612a3f565b600060405180830381600087803b1580156114bf57600080fd5b505af11580156114d3573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561153b57600080fd5b505af115801561154f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115739190810190612158565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115ca919061299c565b600060405180830381600087803b1580156115e457600080fd5b505af11580156115f8573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a184846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116539291906128eb565b602060405180830381600087803b15801561166d57600080fd5b505af1158015611681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116a591908101906121fc565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a816040516116d691906127f8565b60405180910390a18095505050505050949350505050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161174e90612a6d565b602060405180830381600087803b15801561176857600080fd5b505af115801561177c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117a091908101906121d3565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061183e91908101906121aa565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611895919061299c565b600060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161191c9190612947565b600060405180830381600087803b15801561193657600080fd5b505af115801561194a573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119a39190612a3f565b600060405180830381600087803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a2a91906129f1565b600060405180830381600087803b158015611a4457600080fd5b505af1158015611a58573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac36836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ab191906128bd565b602060405180830381600087803b158015611acb57600080fd5b505af1158015611adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b0391908101906121fc565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce81604051611b3491906127f8565b60405180910390a180945050505050949350505050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bab90612a6d565b602060405180830381600087803b158015611bc557600080fd5b505af1158015611bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bfd91908101906121d3565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c6357600080fd5b505af1158015611c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c9b9190810190612158565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cf2919061299c565b600060405180830381600087803b158015611d0c57600080fd5b505af1158015611d20573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb2117836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d79919061288f565b602060405180830381600087803b158015611d9357600080fd5b505af1158015611da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dcb91908101906121fc565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc315735811281604051611dfc91906127f8565b60405180910390a180945050505050919050565b60405161219380612d4283390190565b600082601f8301121515611e3357600080fd5b8151611e46611e4182612b46565b612b19565b91508181835260208401935060208101905083856020840282011115611e6b57600080fd5b60005b83811015611e9b5781611e818882611f7f565b845260208401935060208301925050600181019050611e6e565b5050505092915050565b600082601f8301121515611eb857600080fd5b8151611ecb611ec682612b6e565b612b19565b9150818183526020840193506020810190508360005b83811015611f115781518601611ef78882611f93565b845260208401935060208301925050600181019050611ee1565b5050505092915050565b6000611f278251612c78565b905092915050565b6000611f3b8251612c8a565b905092915050565b6000611f4f8251612c9c565b905092915050565b6000611f638251612cae565b905092915050565b6000611f778235612cc0565b905092915050565b6000611f8b8251612cc0565b905092915050565b600082601f8301121515611fa657600080fd5b8151611fb9611fb482612b96565b612b19565b91508082526020830160208301858383011115611fd557600080fd5b611fe0838284612cfd565b50505092915050565b600082601f8301121515611ffc57600080fd5b813561200f61200a82612bc2565b612b19565b9150808252602083016020830185838301111561202b57600080fd5b612036838284612cee565b50505092915050565b600082601f830112151561205257600080fd5b815161206561206082612bc2565b612b19565b9150808252602083016020830185838301111561208157600080fd5b61208c838284612cfd565b50505092915050565b600080600080608085870312156120ab57600080fd5b600085015167ffffffffffffffff8111156120c557600080fd5b6120d187828801611ea5565b945050602085015167ffffffffffffffff8111156120ee57600080fd5b6120fa87828801611ea5565b935050604085015167ffffffffffffffff81111561211757600080fd5b61212387828801611ea5565b925050606085015167ffffffffffffffff81111561214057600080fd5b61214c87828801611e20565b91505092959194509250565b60006020828403121561216a57600080fd5b600061217884828501611f1b565b91505092915050565b60006020828403121561219357600080fd5b60006121a184828501611f2f565b91505092915050565b6000602082840312156121bc57600080fd5b60006121ca84828501611f43565b91505092915050565b6000602082840312156121e557600080fd5b60006121f384828501611f57565b91505092915050565b60006020828403121561220e57600080fd5b600061221c84828501611f7f565b91505092915050565b60006020828403121561223757600080fd5b600082013567ffffffffffffffff81111561225157600080fd5b61225d84828501611fe9565b91505092915050565b60006020828403121561227857600080fd5b600082015167ffffffffffffffff81111561229257600080fd5b61229e8482850161203f565b91505092915050565b600080600080608085870312156122bd57600080fd5b600085013567ffffffffffffffff8111156122d757600080fd5b6122e387828801611fe9565b945050602085013567ffffffffffffffff81111561230057600080fd5b61230c87828801611fe9565b935050604061231d87828801611f6b565b925050606061232e87828801611f6b565b91505092959194509250565b6000806000806080858703121561235057600080fd5b600085013567ffffffffffffffff81111561236a57600080fd5b61237687828801611fe9565b945050602085013567ffffffffffffffff81111561239357600080fd5b61239f87828801611fe9565b935050604085013567ffffffffffffffff8111156123bc57600080fd5b6123c887828801611fe9565b92505060606123d987828801611f6b565b91505092959194509250565b60006123f082612c08565b80845260208401935061240283612bee565b60005b82811015612434576124188683516124cc565b61242182612c34565b9150602086019550600181019050612405565b50849250505092915050565b600061244b82612c13565b8084526020840193508360208202850161246485612bfb565b60005b8481101561249d57838303885261247f838351612511565b925061248a82612c41565b9150602088019750600181019050612467565b508196508694505050505092915050565b6124b781612cca565b82525050565b6124c681612cdc565b82525050565b6124d581612c6e565b82525050565b60006124e682612c29565b8084526124fa816020860160208601612cfd565b61250381612d30565b602085010191505092915050565b600061251c82612c1e565b808452612530816020860160208601612cfd565b61253981612d30565b602085010191505092915050565b6000600382527f6b657900000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f6e616d65000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f69642c412c422c4d6f6e657900000000000000000000000000000000000000006020830152604082019050919050565b6000601982527f69642c6e616d652c7472757374776f727468792c66756e6473000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f66756e64730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f7472757374776f727468790000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f436f6d70616e79000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f4163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060808201905081810360008301526127508187612440565b905081810360208301526127648186612440565b9050818103604083015261277881856123e5565b9050818103606083015261278c81846123e5565b905095945050505050565b600060808201905081810360008301526127b18187612440565b905081810360208301526127c58186612440565b905081810360408301526127d98185612440565b905081810360608301526127ed81846123e5565b905095945050505050565b600060208201905061280d60008301846124cc565b92915050565b6000602082019050818103600083015261282d81846124db565b905092915050565b6000608082019050818103600083015261284f81876124db565b9050818103602083015261286381866124db565b9050818103604083015261287781856124db565b905061288660608301846124cc565b95945050505050565b600060408201905081810360008301526128a881612547565b90506128b760208301846124ae565b92915050565b600060408201905081810360008301526128d681612547565b90506128e560208301846124bd565b92915050565b6000606082019050818103600083015261290481612547565b905061291360208301856124bd565b61292060408301846124ae565b9392505050565b600060208201905081810360008301526129408161257e565b9050919050565b600060408201905081810360008301526129608161257e565b9050818103602083015261297481846124db565b905092915050565b6000602082019050818103600083015261299581612623565b9050919050565b600060408201905081810360008301526129b581612623565b905081810360208301526129c981846124db565b905092915050565b600060208201905081810360008301526129ea8161265a565b9050919050565b60006040820190508181036000830152612a0a8161265a565b9050612a1960208301846124cc565b92915050565b60006020820190508181036000830152612a3881612691565b9050919050565b60006040820190508181036000830152612a5881612691565b9050612a6760208301846124cc565b92915050565b60006020820190508181036000830152612a86816126c8565b9050919050565b60006060820190508181036000830152612aa6816126c8565b90508181036020830152612ab981612547565b90508181036040830152612acc816125ec565b9050919050565b60006060820190508181036000830152612aec816126ff565b90508181036020830152612aff81612547565b90508181036040830152612b12816125b5565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715612b3c57600080fd5b8060405250919050565b600067ffffffffffffffff821115612b5d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612b8557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612bad57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612bd957600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c8382612c4e565b9050919050565b6000612c9582612c4e565b9050919050565b6000612ca782612c4e565b9050919050565b6000612cb982612c4e565b9050919050565b6000819050919050565b6000612cd582612c4e565b9050919050565b6000612ce782612c4e565b9050919050565b82818337600083830152505050565b60005b83811015612d1b578082015181840152602081019050612d00565b83811115612d2a576000848401525b50505050565b6000601f19601f83011690509190505600608060405234801561001057600080fd5b50612173806100206000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806331252c95146100675780635398a96b146100a457806380599e4b146100d2578063c795e5291461010f575b600080fd5b34801561007357600080fd5b5061008e600480360361008991908101906119b5565b61014c565b60405161009b9190611d6d565b60405180910390f35b3480156100b057600080fd5b506100b961064b565b6040516100c99493929190611d0c565b60405180910390f35b3480156100de57600080fd5b506100f960048036036100f49190810190611933565b611020565b6040516101069190611d6d565b60405180910390f35b34801561011b57600080fd5b50610136600480360361013191908101906119b5565b6112e5565b6040516101439190611d6d565b60405180910390f35b60008060008060008061100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016101ad90611f6d565b602060405180830381600087803b1580156101c757600080fd5b505af11580156101db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101ff91908101906118e1565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561026557600080fd5b505af1158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061029d91908101906118b8565b92508273ffffffffffffffffffffffffffffffffffffffff16632ef8ba74886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102f49190611f3f565b600060405180830381600087803b15801561030e57600080fd5b505af1158015610322573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161037b9190611da8565b600060405180830381600087803b15801561039557600080fd5b505af11580156103a9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104029190611e95565b600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561049857600080fd5b505af11580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104d09190810190611866565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d18b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105279190611eea565b600060405180830381600087803b15801561054157600080fd5b505af1158015610555573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a184846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016105b0929190611e39565b602060405180830381600087803b1580156105ca57600080fd5b505af11580156105de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610602919081019061190a565b90507f8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a816040516106339190611d6d565b60405180910390a18095505050505050949350505050565b60608060608060008060008060608060608060008061100199508973ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106b890611f6d565b602060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061070a91908101906118e1565b98508873ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561077057600080fd5b505af1158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107a89190810190611866565b97508873ffffffffffffffffffffffffffffffffffffffff1663e8434e39896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107ff9190611ddd565b602060405180830381600087803b15801561081957600080fd5b505af115801561082d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610851919081019061188f565b96508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108b757600080fd5b505af11580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108ef919081019061190a565b60405190808252806020026020018201604052801561092257816020015b606081526020019060019003908161090d5790505b5095508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561098957600080fd5b505af115801561099d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109c1919081019061190a565b6040519080825280602002602001820160405280156109f457816020015b60608152602001906001900390816109df5790505b5094508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a93919081019061190a565b604051908082528060200260200182016040528015610ac657816020015b6060815260200190600190039081610ab15790505b5093508673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610b2d57600080fd5b505af1158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610b65919081019061190a565b604051908082528060200260200182016040528015610b935781602001602082028038833980820191505090505b509250600091505b8673ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610bff57600080fd5b505af1158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c37919081019061190a565b821215611004578673ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c939190611d6d565b602060405180830381600087803b158015610cad57600080fd5b505af1158015610cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ce591908101906118b8565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d3a90611eca565b600060405180830381600087803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610d919190810190611974565b8683815181101515610d9f57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dff90611d88565b600060405180830381600087803b158015610e1957600080fd5b505af1158015610e2d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610e569190810190611974565b8583815181101515610e6457fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ec490611e75565b600060405180830381600087803b158015610ede57600080fd5b505af1158015610ef2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610f1b9190810190611974565b8483815181101515610f2957fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff1663fda69fae6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f8990611f1f565b602060405180830381600087803b158015610fa357600080fd5b505af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fdb919081019061190a565b8383815181101515610fe957fe5b90602001906020020181815250508180600101925050610b9b565b858585859d509d509d509d505050505050505050505090919293565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161108090611f6d565b602060405180830381600087803b15801561109a57600080fd5b505af11580156110ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110d291908101906118e1565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561113857600080fd5b505af115801561114c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111709190810190611866565b91508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d1876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111c79190611eea565b600060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166328bb2117836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161124e9190611ddd565b602060405180830381600087803b15801561126857600080fd5b505af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112a0919081019061190a565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112816040516112d19190611d6d565b60405180910390a180945050505050919050565b600080600080600061100193508373ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161134590611f6d565b602060405180830381600087803b15801561135f57600080fd5b505af1158015611373573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061139791908101906118e1565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061143591908101906118b8565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161148c9190611eea565b600060405180830381600087803b1580156114a657600080fd5b505af11580156114ba573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115139190611da8565b600060405180830381600087803b15801561152d57600080fd5b505af1158015611541573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161159a9190611e95565b600060405180830381600087803b1580156115b457600080fd5b505af11580156115c8573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16632ef8ba74876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116219190611f3f565b600060405180830381600087803b15801561163b57600080fd5b505af115801561164f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac36836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116a89190611e0b565b602060405180830381600087803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116fa919081019061190a565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce8160405161172b9190611d6d565b60405180910390a180945050505050949350505050565b600061174e8251612070565b905092915050565b60006117628251612082565b905092915050565b60006117768251612094565b905092915050565b600061178a82516120a6565b905092915050565b600061179e82356120b8565b905092915050565b60006117b282516120b8565b905092915050565b600082601f83011215156117cd57600080fd5b81356117e06117db82611fba565b611f8d565b915080825260208301602083018583830111156117fc57600080fd5b6118078382846120e6565b50505092915050565b600082601f830112151561182357600080fd5b815161183661183182611fba565b611f8d565b9150808252602083016020830185838301111561185257600080fd5b61185d8382846120f5565b50505092915050565b60006020828403121561187857600080fd5b600061188684828501611742565b91505092915050565b6000602082840312156118a157600080fd5b60006118af84828501611756565b91505092915050565b6000602082840312156118ca57600080fd5b60006118d88482850161176a565b91505092915050565b6000602082840312156118f357600080fd5b60006119018482850161177e565b91505092915050565b60006020828403121561191c57600080fd5b600061192a848285016117a6565b91505092915050565b60006020828403121561194557600080fd5b600082013567ffffffffffffffff81111561195f57600080fd5b61196b848285016117ba565b91505092915050565b60006020828403121561198657600080fd5b600082015167ffffffffffffffff8111156119a057600080fd5b6119ac84828501611810565b91505092915050565b600080600080608085870312156119cb57600080fd5b600085013567ffffffffffffffff8111156119e557600080fd5b6119f1878288016117ba565b945050602085013567ffffffffffffffff811115611a0e57600080fd5b611a1a878288016117ba565b935050604085013567ffffffffffffffff811115611a3757600080fd5b611a43878288016117ba565b9250506060611a5487828801611792565b91505092959194509250565b6000611a6b82612000565b808452602084019350611a7d83611fe6565b60005b82811015611aaf57611a93868351611b47565b611a9c8261202c565b9150602086019550600181019050611a80565b50849250505092915050565b6000611ac68261200b565b80845260208401935083602082028501611adf85611ff3565b60005b84811015611b18578383038852611afa838351611b8c565b9250611b0582612039565b9150602088019750600181019050611ae2565b508196508694505050505092915050565b611b32816120c2565b82525050565b611b41816120d4565b82525050565b611b5081612066565b82525050565b6000611b6182612021565b808452611b758160208601602086016120f5565b611b7e81612128565b602085010191505092915050565b6000611b9782612016565b808452611bab8160208601602086016120f5565b611bb481612128565b602085010191505092915050565b6000600182527f41000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f6b657900000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600182527f42000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600282527f69640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f4d6f6e65790000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600782527f4163636f756e74000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006080820190508181036000830152611d268187611abb565b90508181036020830152611d3a8186611abb565b90508181036040830152611d4e8185611abb565b90508181036060830152611d628184611a60565b905095945050505050565b6000602082019050611d826000830184611b47565b92915050565b60006020820190508181036000830152611da181611bc2565b9050919050565b60006040820190508181036000830152611dc181611bc2565b90508181036020830152611dd58184611b56565b905092915050565b60006040820190508181036000830152611df681611bf9565b9050611e056020830184611b29565b92915050565b60006040820190508181036000830152611e2481611bf9565b9050611e336020830184611b38565b92915050565b60006060820190508181036000830152611e5281611bf9565b9050611e616020830185611b38565b611e6e6040830184611b29565b9392505050565b60006020820190508181036000830152611e8e81611c30565b9050919050565b60006040820190508181036000830152611eae81611c30565b90508181036020830152611ec28184611b56565b905092915050565b60006020820190508181036000830152611ee381611c67565b9050919050565b60006040820190508181036000830152611f0381611c67565b90508181036020830152611f178184611b56565b905092915050565b60006020820190508181036000830152611f3881611c9e565b9050919050565b60006040820190508181036000830152611f5881611c9e565b9050611f676020830184611b47565b92915050565b60006020820190508181036000830152611f8681611cd5565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715611fb057600080fd5b8060405250919050565b600067ffffffffffffffff821115611fd157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061207b82612046565b9050919050565b600061208d82612046565b9050919050565b600061209f82612046565b9050919050565b60006120b182612046565b9050919050565b6000819050919050565b60006120cd82612046565b9050919050565b60006120df82612046565b9050919050565b82818337600083830152505050565b60005b838110156121135780820151818401526020810190506120f8565b83811115612122576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820ac80907a83848807f63ff1e36c46a7bc9a4c2ab09d61703ed1d7260ed0ea047b6c6578706572696d656e74616cf50037a265627a7a7230582049cf86efc20661273e9044e9d2bf7c460ae76228e243e70abe1edc1047d0a0d36c6578706572696d656e74616cf50037"

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.RawTransaction, *Store, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.RawTransaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.RawTransaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9dca362f.
//
// Solidity: function createAccount() returns(int256)
func (_Store *StoreTransactor) CreateAccount(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "createAccount")
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9dca362f.
//
// Solidity: function createAccount() returns(int256)
func (_Store *StoreSession) CreateAccount() (*types.RawTransaction, error) {
	return _Store.Contract.CreateAccount(&_Store.TransactOpts)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x9dca362f.
//
// Solidity: function createAccount() returns(int256)
func (_Store *StoreTransactorSession) CreateAccount() (*types.RawTransaction, error) {
	return _Store.Contract.CreateAccount(&_Store.TransactOpts)
}

// CreateCompany is a paid mutator transaction binding the contract method 0xe3d1317a.
//
// Solidity: function createCompany() returns(int256)
func (_Store *StoreTransactor) CreateCompany(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "createCompany")
}

// CreateCompany is a paid mutator transaction binding the contract method 0xe3d1317a.
//
// Solidity: function createCompany() returns(int256)
func (_Store *StoreSession) CreateCompany() (*types.RawTransaction, error) {
	return _Store.Contract.CreateCompany(&_Store.TransactOpts)
}

// CreateCompany is a paid mutator transaction binding the contract method 0xe3d1317a.
//
// Solidity: function createCompany() returns(int256)
func (_Store *StoreTransactorSession) CreateCompany() (*types.RawTransaction, error) {
	return _Store.Contract.CreateCompany(&_Store.TransactOpts)
}

// InsertAccount is a paid mutator transaction binding the contract method 0x71ad90b2.
//
// Solidity: function insertAccount(string id, string A, string B, int256 money) returns(int256)
func (_Store *StoreTransactor) InsertAccount(opts *bind.TransactOpts, id string, A string, B string, money *big.Int) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "insertAccount", id, A, B, money)
}

// InsertAccount is a paid mutator transaction binding the contract method 0x71ad90b2.
//
// Solidity: function insertAccount(string id, string A, string B, int256 money) returns(int256)
func (_Store *StoreSession) InsertAccount(id string, A string, B string, money *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.InsertAccount(&_Store.TransactOpts, id, A, B, money)
}

// InsertAccount is a paid mutator transaction binding the contract method 0x71ad90b2.
//
// Solidity: function insertAccount(string id, string A, string B, int256 money) returns(int256)
func (_Store *StoreTransactorSession) InsertAccount(id string, A string, B string, money *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.InsertAccount(&_Store.TransactOpts, id, A, B, money)
}

// InsertCompany is a paid mutator transaction binding the contract method 0xfab6fabd.
//
// Solidity: function insertCompany(string id, string name, int256 trustworthy, int256 funds) returns(int256)
func (_Store *StoreTransactor) InsertCompany(opts *bind.TransactOpts, id string, name string, trustworthy *big.Int, funds *big.Int) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "insertCompany", id, name, trustworthy, funds)
}

// InsertCompany is a paid mutator transaction binding the contract method 0xfab6fabd.
//
// Solidity: function insertCompany(string id, string name, int256 trustworthy, int256 funds) returns(int256)
func (_Store *StoreSession) InsertCompany(id string, name string, trustworthy *big.Int, funds *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.InsertCompany(&_Store.TransactOpts, id, name, trustworthy, funds)
}

// InsertCompany is a paid mutator transaction binding the contract method 0xfab6fabd.
//
// Solidity: function insertCompany(string id, string name, int256 trustworthy, int256 funds) returns(int256)
func (_Store *StoreTransactorSession) InsertCompany(id string, name string, trustworthy *big.Int, funds *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.InsertCompany(&_Store.TransactOpts, id, name, trustworthy, funds)
}

// RemoveAccount is a paid mutator transaction binding the contract method 0x46038ddc.
//
// Solidity: function removeAccount(string id) returns(int256)
func (_Store *StoreTransactor) RemoveAccount(opts *bind.TransactOpts, id string) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "removeAccount", id)
}

// RemoveAccount is a paid mutator transaction binding the contract method 0x46038ddc.
//
// Solidity: function removeAccount(string id) returns(int256)
func (_Store *StoreSession) RemoveAccount(id string) (*types.RawTransaction, error) {
	return _Store.Contract.RemoveAccount(&_Store.TransactOpts, id)
}

// RemoveAccount is a paid mutator transaction binding the contract method 0x46038ddc.
//
// Solidity: function removeAccount(string id) returns(int256)
func (_Store *StoreTransactorSession) RemoveAccount(id string) (*types.RawTransaction, error) {
	return _Store.Contract.RemoveAccount(&_Store.TransactOpts, id)
}

// RemoveCompany is a paid mutator transaction binding the contract method 0xffcee0a1.
//
// Solidity: function removeCompany(string id) returns(int256)
func (_Store *StoreTransactor) RemoveCompany(opts *bind.TransactOpts, id string) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "removeCompany", id)
}

// RemoveCompany is a paid mutator transaction binding the contract method 0xffcee0a1.
//
// Solidity: function removeCompany(string id) returns(int256)
func (_Store *StoreSession) RemoveCompany(id string) (*types.RawTransaction, error) {
	return _Store.Contract.RemoveCompany(&_Store.TransactOpts, id)
}

// RemoveCompany is a paid mutator transaction binding the contract method 0xffcee0a1.
//
// Solidity: function removeCompany(string id) returns(int256)
func (_Store *StoreTransactorSession) RemoveCompany(id string) (*types.RawTransaction, error) {
	return _Store.Contract.RemoveCompany(&_Store.TransactOpts, id)
}

// SelectAccount is a paid mutator transaction binding the contract method 0xe4464a6c.
//
// Solidity: function selectAccount() returns(string[], string[], string[], int256[])
func (_Store *StoreTransactor) SelectAccount(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "selectAccount")
}

// SelectAccount is a paid mutator transaction binding the contract method 0xe4464a6c.
//
// Solidity: function selectAccount() returns(string[], string[], string[], int256[])
func (_Store *StoreSession) SelectAccount() (*types.RawTransaction, error) {
	return _Store.Contract.SelectAccount(&_Store.TransactOpts)
}

// SelectAccount is a paid mutator transaction binding the contract method 0xe4464a6c.
//
// Solidity: function selectAccount() returns(string[], string[], string[], int256[])
func (_Store *StoreTransactorSession) SelectAccount() (*types.RawTransaction, error) {
	return _Store.Contract.SelectAccount(&_Store.TransactOpts)
}

// SelectCompany is a paid mutator transaction binding the contract method 0x65538db2.
//
// Solidity: function selectCompany() returns(string[], string[], int256[], int256[])
func (_Store *StoreTransactor) SelectCompany(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "selectCompany")
}

// SelectCompany is a paid mutator transaction binding the contract method 0x65538db2.
//
// Solidity: function selectCompany() returns(string[], string[], int256[], int256[])
func (_Store *StoreSession) SelectCompany() (*types.RawTransaction, error) {
	return _Store.Contract.SelectCompany(&_Store.TransactOpts)
}

// SelectCompany is a paid mutator transaction binding the contract method 0x65538db2.
//
// Solidity: function selectCompany() returns(string[], string[], int256[], int256[])
func (_Store *StoreTransactorSession) SelectCompany() (*types.RawTransaction, error) {
	return _Store.Contract.SelectCompany(&_Store.TransactOpts)
}

// UpdateAccount is a paid mutator transaction binding the contract method 0x830aed51.
//
// Solidity: function updateAccount(string id, string A, string B, int256 money) returns(int256)
func (_Store *StoreTransactor) UpdateAccount(opts *bind.TransactOpts, id string, A string, B string, money *big.Int) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "updateAccount", id, A, B, money)
}

// UpdateAccount is a paid mutator transaction binding the contract method 0x830aed51.
//
// Solidity: function updateAccount(string id, string A, string B, int256 money) returns(int256)
func (_Store *StoreSession) UpdateAccount(id string, A string, B string, money *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.UpdateAccount(&_Store.TransactOpts, id, A, B, money)
}

// UpdateAccount is a paid mutator transaction binding the contract method 0x830aed51.
//
// Solidity: function updateAccount(string id, string A, string B, int256 money) returns(int256)
func (_Store *StoreTransactorSession) UpdateAccount(id string, A string, B string, money *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.UpdateAccount(&_Store.TransactOpts, id, A, B, money)
}

// UpdateCompany is a paid mutator transaction binding the contract method 0xef40a467.
//
// Solidity: function updateCompany(string id, string name, int256 trustworthy, int256 funds) returns(int256)
func (_Store *StoreTransactor) UpdateCompany(opts *bind.TransactOpts, id string, name string, trustworthy *big.Int, funds *big.Int) (*types.RawTransaction, error) {
	return _Store.contract.Transact(opts, "updateCompany", id, name, trustworthy, funds)
}

// UpdateCompany is a paid mutator transaction binding the contract method 0xef40a467.
//
// Solidity: function updateCompany(string id, string name, int256 trustworthy, int256 funds) returns(int256)
func (_Store *StoreSession) UpdateCompany(id string, name string, trustworthy *big.Int, funds *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.UpdateCompany(&_Store.TransactOpts, id, name, trustworthy, funds)
}

// UpdateCompany is a paid mutator transaction binding the contract method 0xef40a467.
//
// Solidity: function updateCompany(string id, string name, int256 trustworthy, int256 funds) returns(int256)
func (_Store *StoreTransactorSession) UpdateCompany(id string, name string, trustworthy *big.Int, funds *big.Int) (*types.RawTransaction, error) {
	return _Store.Contract.UpdateCompany(&_Store.TransactOpts, id, name, trustworthy, funds)
}

// StoreCreateResultIterator is returned from FilterCreateResult and is used to iterate over the raw logs and unpacked data for CreateResult events raised by the Store contract.
type StoreCreateResultIterator struct {
	Event *StoreCreateResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCreateResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCreateResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCreateResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCreateResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCreateResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCreateResult represents a CreateResult event raised by the Store contract.
type StoreCreateResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCreateResult is a free log retrieval operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Store *StoreFilterer) FilterCreateResult(opts *bind.FilterOpts) (*StoreCreateResultIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "CreateResult")
	if err != nil {
		return nil, err
	}
	return &StoreCreateResultIterator{contract: _Store.contract, event: "CreateResult", logs: logs, sub: sub}, nil
}

// WatchCreateResult is a free log subscription operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Store *StoreFilterer) WatchCreateResult(opts *bind.WatchOpts, sink chan<- *StoreCreateResult) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "CreateResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCreateResult)
				if err := _Store.contract.UnpackLog(event, "CreateResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateResult is a log parse operation binding the contract event 0xb5636cd912a73dcdb5b570dbe331dfa3e6435c93e029e642def2c8e40dacf210.
//
// Solidity: event CreateResult(int256 count)
func (_Store *StoreFilterer) ParseCreateResult(log types.Log) (*StoreCreateResult, error) {
	event := new(StoreCreateResult)
	if err := _Store.contract.UnpackLog(event, "CreateResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StoreInsertResultIterator is returned from FilterInsertResult and is used to iterate over the raw logs and unpacked data for InsertResult events raised by the Store contract.
type StoreInsertResultIterator struct {
	Event *StoreInsertResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreInsertResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreInsertResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreInsertResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreInsertResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreInsertResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreInsertResult represents a InsertResult event raised by the Store contract.
type StoreInsertResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterInsertResult is a free log retrieval operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Store *StoreFilterer) FilterInsertResult(opts *bind.FilterOpts) (*StoreInsertResultIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "InsertResult")
	if err != nil {
		return nil, err
	}
	return &StoreInsertResultIterator{contract: _Store.contract, event: "InsertResult", logs: logs, sub: sub}, nil
}

// WatchInsertResult is a free log subscription operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Store *StoreFilterer) WatchInsertResult(opts *bind.WatchOpts, sink chan<- *StoreInsertResult) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "InsertResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreInsertResult)
				if err := _Store.contract.UnpackLog(event, "InsertResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsertResult is a log parse operation binding the contract event 0xc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce.
//
// Solidity: event InsertResult(int256 count)
func (_Store *StoreFilterer) ParseInsertResult(log types.Log) (*StoreInsertResult, error) {
	event := new(StoreInsertResult)
	if err := _Store.contract.UnpackLog(event, "InsertResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StoreRemoveResultIterator is returned from FilterRemoveResult and is used to iterate over the raw logs and unpacked data for RemoveResult events raised by the Store contract.
type StoreRemoveResultIterator struct {
	Event *StoreRemoveResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRemoveResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRemoveResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRemoveResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRemoveResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRemoveResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRemoveResult represents a RemoveResult event raised by the Store contract.
type StoreRemoveResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRemoveResult is a free log retrieval operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Store *StoreFilterer) FilterRemoveResult(opts *bind.FilterOpts) (*StoreRemoveResultIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "RemoveResult")
	if err != nil {
		return nil, err
	}
	return &StoreRemoveResultIterator{contract: _Store.contract, event: "RemoveResult", logs: logs, sub: sub}, nil
}

// WatchRemoveResult is a free log subscription operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Store *StoreFilterer) WatchRemoveResult(opts *bind.WatchOpts, sink chan<- *StoreRemoveResult) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "RemoveResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRemoveResult)
				if err := _Store.contract.UnpackLog(event, "RemoveResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveResult is a log parse operation binding the contract event 0x4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112.
//
// Solidity: event RemoveResult(int256 count)
func (_Store *StoreFilterer) ParseRemoveResult(log types.Log) (*StoreRemoveResult, error) {
	event := new(StoreRemoveResult)
	if err := _Store.contract.UnpackLog(event, "RemoveResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// StoreUpdateResultIterator is returned from FilterUpdateResult and is used to iterate over the raw logs and unpacked data for UpdateResult events raised by the Store contract.
type StoreUpdateResultIterator struct {
	Event *StoreUpdateResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  common.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreUpdateResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreUpdateResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreUpdateResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreUpdateResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreUpdateResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreUpdateResult represents a UpdateResult event raised by the Store contract.
type StoreUpdateResult struct {
	Count *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterUpdateResult is a free log retrieval operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Store *StoreFilterer) FilterUpdateResult(opts *bind.FilterOpts) (*StoreUpdateResultIterator, error) {

	logs, sub, err := _Store.contract.FilterLogs(opts, "UpdateResult")
	if err != nil {
		return nil, err
	}
	return &StoreUpdateResultIterator{contract: _Store.contract, event: "UpdateResult", logs: logs, sub: sub}, nil
}

// WatchUpdateResult is a free log subscription operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Store *StoreFilterer) WatchUpdateResult(opts *bind.WatchOpts, sink chan<- *StoreUpdateResult) (event.Subscription, error) {

	logs, sub, err := _Store.contract.WatchLogs(opts, "UpdateResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreUpdateResult)
				if err := _Store.contract.UnpackLog(event, "UpdateResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateResult is a log parse operation binding the contract event 0x8e5890af40fc24a059396aca2f83d6ce41fcef086876548fa4fb8ec27e9d292a.
//
// Solidity: event UpdateResult(int256 count)
func (_Store *StoreFilterer) ParseUpdateResult(log types.Log) (*StoreUpdateResult, error) {
	event := new(StoreUpdateResult)
	if err := _Store.contract.UnpackLog(event, "UpdateResult", log); err != nil {
		return nil, err
	}
	return event, nil
}
