{"remainingRequest":"/Users/chrisju/vue/vue-manage-system/node_modules/thread-loader/dist/cjs.js!/Users/chrisju/vue/vue-manage-system/node_modules/babel-loader/lib/index.js!/Users/chrisju/vue/vue-manage-system/src/components/common/directives.js","dependencies":[{"path":"/Users/chrisju/vue/vue-manage-system/src/components/common/directives.js","mtime":1576123983675},{"path":"/Users/chrisju/vue/vue-manage-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrisju/vue/vue-manage-system/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/chrisju/vue/vue-manage-system/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport Vue from 'vue'; // v-dialogDrag: 弹窗拖拽属性\n\nVue.directive('dialogDrag', {\n  bind: function bind(el, binding, vnode, oldVnode) {\n    var dialogHeaderEl = el.querySelector('.el-dialog__header');\n    var dragDom = el.querySelector('.el-dialog');\n    dialogHeaderEl.style.cssText += ';cursor:move;';\n    dragDom.style.cssText += ';top:0px;'; // 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);\n\n    var sty = function () {\n      if (window.document.currentStyle) {\n        return function (dom, attr) {\n          return dom.currentStyle[attr];\n        };\n      } else {\n        return function (dom, attr) {\n          return getComputedStyle(dom, false)[attr];\n        };\n      }\n    }();\n\n    dialogHeaderEl.onmousedown = function (e) {\n      // 鼠标按下，计算当前元素距离可视区的距离\n      var disX = e.clientX - dialogHeaderEl.offsetLeft;\n      var disY = e.clientY - dialogHeaderEl.offsetTop;\n      var screenWidth = document.body.clientWidth; // body当前宽度\n\n      var screenHeight = document.documentElement.clientHeight; // 可见区域高度(应为body高度，可某些环境下无法获取) \n\n      var dragDomWidth = dragDom.offsetWidth; // 对话框宽度\n\n      var dragDomheight = dragDom.offsetHeight; // 对话框高度\n\n      var minDragDomLeft = dragDom.offsetLeft;\n      var maxDragDomLeft = screenWidth - dragDom.offsetLeft - dragDomWidth;\n      var minDragDomTop = dragDom.offsetTop;\n      var maxDragDomTop = screenHeight - dragDom.offsetTop - dragDomheight; // 获取到的值带px 正则匹配替换\n\n      var styL = sty(dragDom, 'left');\n      var styT = sty(dragDom, 'top'); // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n\n      if (styL.includes('%')) {\n        styL = +document.body.clientWidth * (+styL.replace(/\\%/g, '') / 100);\n        styT = +document.body.clientHeight * (+styT.replace(/\\%/g, '') / 100);\n      } else {\n        styL = +styL.replace(/\\px/g, '');\n        styT = +styT.replace(/\\px/g, '');\n      }\n\n      ;\n\n      document.onmousemove = function (e) {\n        // 通过事件委托，计算移动的距离 \n        var left = e.clientX - disX;\n        var top = e.clientY - disY; // 边界处理\n\n        if (-left > minDragDomLeft) {\n          left = -minDragDomLeft;\n        } else if (left > maxDragDomLeft) {\n          left = maxDragDomLeft;\n        }\n\n        if (-top > minDragDomTop) {\n          top = -minDragDomTop;\n        } else if (top > maxDragDomTop) {\n          top = maxDragDomTop;\n        } // 移动当前元素  \n\n\n        dragDom.style.cssText += \";left:\".concat(left + styL, \"px;top:\").concat(top + styT, \"px;\");\n      };\n\n      document.onmouseup = function (e) {\n        document.onmousemove = null;\n        document.onmouseup = null;\n      };\n    };\n  }\n});",null]}